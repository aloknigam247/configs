set nocompatible " Set no compatible

" Plugins - Vim-plug
" ``````````````````
call plug#begin()
  Plug 'lfv89/vim-interestingwords'
  let g:interestingWordsRandomiseColors = 1

" |-- Colorschemes --|
"  Plug 'NLKNguyen/papercolor-theme' " Light, Dark, Diff
"    let g:PaperColor_Theme_Options = {'language': {'cpp': {'highlight_standard_library': 1},'c': {'highlight_builtins' : 1}}}
"  Plug 'Rigellute/rigel' " Dark 
"    let g:rigel_lightline = 1
"  Plug 'aonemd/kuroi.vim'
"  Plug 'ayu-theme/ayu-vim'
  Plug 'fxn/vim-monochrome'
  Plug 'google/vim-colorscheme-primary' 
"  Plug 'hardcoreplayers/oceanic-material'
"  Plug 'hardselius/warlock'
"  Plug 'https://gitlab.com/rj-white/vim-colors-paramountblue'
"  Plug 'jacoborus/tender.vim'
"  Plug 'kevinsawicki/monokai'
"  Plug 'kristijanhusak/vim-hybrid-material'
"  Plug 'mkarmona/materialbox'
"  Plug 'nanotech/jellybeans.vim'
"  Plug 'nightsense/seabird'
"  Plug 'nightsense/snow'
"  Plug 'nikolvs/vim-sunbather'
"  Plug 'notpratheek/vim-luna'
"  Plug 'notpratheek/vim-sol'
"  Plug 'ntk148v/vim-horizon'
"  Plug 'owickstrom/vim-colors-paramount'
"  Plug 'patstockwell/vim-monokai-tasty'
"  Plug 'rakr/vim-one'
"  Plug 'rakr/vim-two-firewatch'
"  Plug 'reedes/vim-colors-pencil'
"  Plug 'rhysd/vim-color-spring-night'
"  Plug 'srcery-colors/srcery-vim'
"  Plug 'wadackel/vim-dogrun'

" |-- Context --|
  Plug 'wellle/context.vim', {'on': 'ContextToggle'}
  let g:context_border_char = '-'
  let g:Context_border_indent = { -> 0  } " Full width seperator
  let g:context_highlight_border = 'Special'

" |-- CSS Colors --|
  Plug 'ap/vim-css-color'

" |-- Cursorword --|
  Plug 'itchyny/vim-cursorword'

" |-- Indentline --|
"  Plug 'Yggdroot/indentLine'
"  let g:indentLine_char = '│'

" |-- Lightline --|
  Plug 'itchyny/lightline.vim'
  let g:lightline = {
    \ 'colorscheme': 'falcon',
  	\ 'component': {
  	\   'lineinfo': ' %3l:%-2v',
  	\ },
  	\ 'component_function': {
  	\   'readonly': 'LightlineReadonly',
  	\   'fugitive': 'LightlineFugitive'
  	\ },
  	\ 'separator': { 'left': '', 'right': '' },
  	\ 'subseparator': { 'left': '', 'right': '' }
  	\ }
  function! LightlineReadonly()
    return &readonly ? '' : ''
  endfunction

" |-- Rainbow Parentheses --|
  "Plug 'frazrepo/vim-rainbow'
  "let g:rainbow_active = 1
  "let g:rainbow_guifgs = ['#3a86ff', '#fca311', '#d90429', '#0ead69']

" |-- Syntax Highlight --|
  Plug 'bfrg/vim-cpp-modern', {'for': ['c', 'cpp']}
  let g:cpp_named_requirements_highlight = 1

call plug#end()


"" |-- Git Blamer --|
"  "Plug 'zivyangll/git-blame.vim'
"  "nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>
"
"" |-- Vim Signify --|
"  Plug 'mhinz/vim-signify'
"  "let g:signify_line_highlight = 1
"  let g:signify_fold_context = [1, 3] " [foldlevel0, foldlevel1]
"  " Commands:
"  "   SignifyDiff: Opens a diff in new tab
"  "   SignifyFold: Opens folded unchanged lines
"
"" |-- Wilder --|
"  if v:version > 800
"    Plug 'gelguy/wilder.nvim'
"  endif

"
"" Wilder Config
"" `````````````
"if v:version > 800
"" |-- Wilder --|
"  call wilder#enable_cmdline_enter()
"  set wildcharm=<Tab>
"  cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
"  cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
"  call wilder#set_option('modes', ['/', '?', ':'])
"endif


" Variables
" `````````
let &titleold             = getcwd() " Set console title to path on vim exit
let c_curly_error         = 1        " Show curly braces error
let c_space_errors        = 1        " Highlight trailing spaces
let g:diff_translations   = 0        " Disables localisations and speeds up syntax highlighting in diff mode
let g:load_doxygen_syntax = 1        " Recognize doxygen comment style
let g:netrw_liststyle     = 3        " Set netrw style as tree

" Config Options
" ``````````````
set autoread                      " Auto reload changed file
set clipboard=unnamedplus         " Use + clipboard buffer
set foldnestmax=2                 " Max fold level
set nobackup                      " Do not create backup file
set noswapfile                    " Disable swap file
set path+=**                      " Look for all files in sub dirs
set path+=/usr/include/c++/10.2.0 " include c++ header files


" Editor Settings
" ```````````````
set autoindent   " New line inherit the indentation of previous lines
set backspace=2  " Set backspace to indent,eol,start
set breakindent  " Every wrapped line will continue visually indented
"set cindent      " C-style indentation
set cpoptions+=Z " When using w! while the 'readonly' option is set,don't reset 'readonly'
set expandtab    " Convert tabs to spaces
set history=1000 " Increase undo limit
set shiftwidth=4 " When shifting, indent using spaces
"set smartindent  " Do smart autoindenting when starting a new line
set tabstop=4    " Indent using spaces
set wrap         " Wrap text
syn enable                   " Syntax highlighting on, w/o overriding


" UI Options
" ``````````
colorscheme primary       " Set colorscheme 
"highlight clear CursorLine   " No underline on text when cursorline is on
"highlight clear CursorLineNR " No underline on line numbers when cursorline is on
set background=dark          " Select appropriate colors for dark or light
"set colorcolumn=101          " Highlight text boundary for character length greater than 100
set confirm                  " Raise dialog on quit if file has unsaved changes
set culopt=number,screenline " Highlight current line and line number of current window
set cursorline               " Highlight the line currently under cursor
set diffopt+=vertical        " Open diff in vertical split
set encoding=utf-8           " Handles multibyte characters correctly
set laststatus=2             " Show status line on the bottom on multiple files
set lazyredraw               " Don't redraw screen on macros, registers and other commands.
"set lcs=space:·,tab:\ \      " Show space as ·, tab as clear spaces
"set list                     " Show special characters
set mouse=a                  " Enable mouse support
set noshowmode               " Don't show INSERT/NOMRAL/VISUAL modes
set number                   " Enable line number
set ruler                    " Show cursor position all time
set shortmess=aoOtT          " Short messages
set showcmd                  " Display incomplete command
set splitbelow               " Place new window below on :split
set splitright               " Place new window right on :vsplit
set t_Co=256                 " Set color depth
set termguicolors            " Enable true colors support
set title                    " Set console title
set ttyfast                  " Smooth rendering
set ttymouse=sgr             " Fix mouse support in half screen
set visualbell               " Flash the screen instead of beeping on errors
set wildmenu                 " Show matching text on status line when <TAB>
"color PaperColor             " Needed for Papercolor 


" Auto Completion Settings
" ````````````````````````
"set complete+=d,t " scan for defined name/macro, include tag completion
"set cscopetag     " Use cscope for tag commands.
"set cscopeverbose " Give messages when adding a cscope database.


" Search Options
" ``````````````
set hlsearch   " Enable search highlighting
set ignorecase " Ignore case when searching
set incsearch  " Incremental search that shows partial matches
set smartcase  " Switch search to case-sensitive when query contains an uppercase letter
set tags=~/tags


" Filetype Specific Options
" `````````````````````````
"autocmd BufNewFile,BufRead *.cyt set syntax=sh " Set cyt filetype as bash
"autocmd Filetype make set noexpandtab shiftwidth=4 softtabstop=0 nocin
"filetype plugin indent on   " File based indentation
