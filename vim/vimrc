" This should be first
set nocompatible "Set no compatible


" Variables
" `````````
let g:diff_translations=0 "Disables localisations and speeds up syntax highlighting in diff mode


" Editor Settings
" ```````````````
set autoindent   " New line inherit the indentation of previous lines
set breakindent  " Every wrapped line will continue visually indented
set cindent      " C-style indentation"
set cpoptions+=Z " When using w! while the 'readonly' option is set,don't reset 'readonly'
set expandtab    " Convert tabs to spaces
set shiftwidth=4 " When shifting, indent using spaces
set smartindent  " Do smart autoindenting when starting a new line
set tabstop=4    " Indent using spaces
set wrap         " Wrap text


" UI Options
" ``````````
set confirm              " Raise dialog on quit if file has unsaved changes
set colorcolumn=101      " Highlight text boundary for character length greater than 100
set cursorline           " Highlight the line currently under cursor
set lazyredraw           " Don't redraw screen on macros, registers and other commands.
set diffopt+=vertical    " Open diff in vertical split
set list                 " Show special characters
set lcs=space:·,tab:\ \  " Show space as ·, tab as clear spaces
set mouse=a              " Enable mouse support
set number               " Enable line number
set splitbelow           " Place new window below on :split
set splitright           " Place new window right on :vsplit
set termguicolors        " Enable true colors support
set t_Co=256             " Set color size
set visualbell           " Flash the screen instead of beeping on errors
set wildmenu             " Show matching text on status line when <TAB>

if v:version > 800
set culopt=number,screenline " Highlight current line and line number of current window
endif


" Auto Completion Settings
" ````````````````````````
set complete+=d,t " scan for defined name/macro, include tag completion
set cscopetag     " Use cscope for tag commands.
set cscopeverbose " Give messages when adding a cscope database.
"set tagcase=smart " If search has uppercase then case sensitive search


" Search Options
" ``````````````
set hlsearch   " Enable search highlighting
set ignorecase " Ignore case when searching
set incsearch  " Incremental search that shows partial matches
set smartcase  " Switch search to case-sensitive when query contains an uppercase letter


" Config Options
" ``````````````
set noswapfile " Disable swap file
set autoread   " Auto reload changed file
set path+=**   " Look for all files in sub dirs


" Filetype Specific Options
" `````````````````````````
autocmd BufNewFile,BufRead *.cyt set syntax=sh " Set cyt filetype as bash
autocmd Filetype make set noexpandtab shiftwidth=4 softtabstop=0 nocin
filetype plugin indent on   " File based indentation


" Plugins - Vim-plug
" ``````````````````
call plug#begin()
" |-- Auto Pairs --|
  Plug 'jiangmiao/auto-pairs'

" |-- Colorschemes --|
  Plug 'mkarmona/materialbox' " Light, Light Diff
  Plug 'jacoborus/tender.vim' " Dark Diff
  Plug 'ayu-theme/ayu-vim'    " Dark
  "Plug 'nanotech/jellybeans.vim'    " Light
  "Plug 'rakr/vim-two-firewatch'     " Light
  "Plug 'NLKNguyen/papercolor-theme' " Light
  "Plug 'notpratheek/vim-sol'         " Light

" |-- Git Blamer --|
  "Plug 'zivyangll/git-blame.vim'
  "nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

" |-- Indentline --|
  Plug 'Yggdroot/indentLine'
  let g:indentLine_char = '│'

" |-- Profile Vim Startup --|
  Plug 'hyiltiz/vim-plugins-profile'

" |-- Rainbow Parentheses --|
  Plug 'kien/rainbow_parentheses.vim'
  let g:rbpt_loadcmd_toggle = 0
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadBraces
  au Syntax * RainbowParenthesesLoadChevrons
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare

" |-- Syntax Highlight --|
  Plug 'octol/vim-cpp-enhanced-highlight'
  "let g:cpp_class_scope_highlight = 1
  "let g:cpp_member_variable_highlight = 1
  "let g:cpp_class_decl_highlight = 1
  "let g:cpp_posix_standard = 1
  "let g:cpp_experimental_template_highlight = 1
  "let g:cpp_concepts_highlight = 1
  let g:cpp_no_function_highlight = 1

" |-- Underlines the word under the cursor --|
  Plug 'itchyny/vim-cursorword'

" |-- Vim Airline --|
  Plug 'vim-airline/vim-airline'
  set noshowmode
  let g:airline#extensions#tabline#enabled = 1
  let g:airline_powerline_fonts = 1
  let g:airline_highlighting_cache = 1
  let g:airline_detect_spell=0
  let g:airline#extensions#disable_rtp_load = 1
  let g:airline_extensions = []

" |-- Vim Airline Themes --|
  Plug 'vim-airline/vim-airline-themes'
  " Both: jellybeans jet soda tomorrow zenburn
  " Dark: atomic ayu base16 distinguished powerlineish ravenpower seagull
  " Light: cool desertink durant hybridline silver sol wombat

" |-- Vim Signify --|
  Plug 'mhinz/vim-signify'
  "let g:signify_line_highlight = 1
  "let g:signify_fold_context = [1, 3] " [foldlevel0, foldlevel1]
  " Commands:
  "   SignifyDiff: Opens a diff in new tab
  "   SignifyFold: Opens folded unchanged lines

" |-- Vim Startify --|
  Plug 'mhinz/vim-startify'

" |-- Wilder --|
  if v:version > 800
    Plug 'gelguy/wilder.nvim'
  endif
call plug#end()


" Colorscheme
" ```````````
if strftime('%H') > 7 && strftime('%H') < 19
   "Light
colorscheme materialbox
else
  "Dark
    if &diff
        colorscheme tender
    else
        colorscheme ayu
    endif
endif


" Wilder Config
" `````````````
if v:version > 800
" |-- Wilder --|
  call wilder#enable_cmdline_enter()
  set wildcharm=<Tab>
  cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
  cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
  call wilder#set_option('modes', ['/', '?', ':'])
endif
